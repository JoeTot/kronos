syntax = "proto3";

package kronospb;
option go_package = "kronospb";

message Request {
  // node_id is the id of the node that sent the request
  string node_id = 1;
  // addr is the address of the node that sent the request
  string advertised_host_port = 2;
  // cluster_id is the id of the cluster that sent the request
  string cluster_id = 3;
  map<string, Info> gossipMap = 4;
}

message Info {
  // timestamp is the time at which the info was added
  int64 timestamp = 1;
  // data is the actual data
  bytes data = 2;
}

message Response {
  // node_id is the id of the node that sent the response
  string node_id = 1;
  map<string, Info> data = 2;
}

message NodeDescriptor {
  // node_id is the id of the node
  string node_id = 1;
  // grpc_addr is the grpc address of the node
  string grpc_addr = 2;
  // raft_addr is the raft address of the node
  string raft_addr = 3;
  // is_bootstrapped is true if the node is bootstrapped
  bool is_bootstrapped = 4;
  // is_removed is true if the node is removed
  bool is_removed = 5;
  // last_heartbeat is the last time the node sent a heartbeat
  int64 last_heartbeat = 6;
  // cluster_id is the id of the cluster
  string cluster_id = 7;
}

message NodeLsRequest {}

message NodeLsResponse {
  repeated NodeDescriptor nodes = 1;
}

service Gossip {
  rpc Gossip(Request) returns (Response) {}
  rpc NodeLs(NodeLsRequest) returns (NodeLsResponse) {}
}